version: '3.7'

volumes:
  kong_data: {}

## For machines running proxy (OpenVPN) on them
networks:
  kong-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.57.0/24

# networks:
#   kong-net:
#     external: false

# networks:
#   kong-net:
#     driver: bridge    

services:
  ## Note: If you are running Kong for the first time and you want to create Kong Database for the first time, run:
  ## docker-compose up kong-migrations
  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  ## Note: If you want to update kong version and need to migrate kong database, run:
  ## docker-compose up kong-migrations-up
  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    depends_on:
      - kong-db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      # KONG_PROXY_ACCESS_LOG: /dev/stdout
      # KONG_PROXY_ERROR_LOG: /dev/stderr

      KONG_ADMIN_LISTEN: '0.0.0.0:8001'      # binds to docker network interface (bridge, host, whatever)
      
      ### Note: Other possible config
      # KONG_ADMIN_LISTEN: '0.0.0.0:8001 reuseport backlog=16384, 0.0.0.0:8444 http2 ssl reuseport backlog=16384'      

      ### Config reverse proxy port
      # KONG_PROXY_LISTEN: '0.0.0.0:8000 reuseport backlog=16384, 0.0.0.0:8443 http2 ssl reuseport backlog=16384'
      
      # KONG_CASSANDRA_CONTACT_POINTS: db    ## Cassandra specific
      KONG_DATABASE: postgres                # postgresql | cassandra
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kong-db
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
      # KONG_ANONYMOUS_REPORTS: off
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"                   ## Note: Noramlly, it should be 80
      - "127.0.0.1:8001:8001/tcp"         # Admin port, insecured
      - "8443:8443/tcp"                   ## Note: Noramlly, it should be 443
      - "127.0.0.1:8444:8444/tcp"         # Admin port, secured
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
    sysctls:
      - net.core.somaxconn=16384
      # - net.ipv6.conf.all.disable_ipv6: 0
      # - net.ipv4.conf.all.forwarding: 1
      # - net.ipv6.conf.all.forwarding: 1
    deploy:
      restart_policy:
        condition: on-failure

  kong-ui:
    image: pantsel/konga:next
    depends_on:
      - kong
    environment:
      DB_ADAPTER: postgres           # 'mongo','postgres','sqlserver'  or 'mysql'
      DB_HOST: kong-db
      # DB_PORT: 5432                # optional defaults to 5432
      DB_USER: kong                  # Arbitrary db user
      DB_PASSWORD: kong 
      DB_DATABASE: kong_ui           # Arbitrary db name
      #DB_PG_SCHEMA: konga           # Optional for postgresql
      NODE_ENV: production          # development | production
      TOKEN_SECRET: eqywtqwbrwqekfsdghf648fkqreytiyufr8347hu    ## Optional random secret string
    restart: on-failure  
    ports:
      ### Note: development port --> 1337, production port --> 1338
      ### Warning: Be careful by exposing this port
      - "127.0.0.1:1337:1337/tcp"             
    networks:
      - kong-net     

  adminer:
    image: adminer
    restart: on-failure
    environment:
      ### Theme (Optional)
      ADMINER_DESIGN: "nette"
      ### Different plugins can be optionally added and configured here
      #ADMINER_PLUGINS: "login-servers tables-filter tinymce"
    networks:
      - kong-net
    ports:
      - 127.0.0.1:8080:8080       ### Warning: don't expose to outside world!
    
  kong-db:
    image: postgres:9.6
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    # ports:
    #  - "127.0.0.1:5432:5432/tcp"    ### Warning: no need to expose DB port!
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data

secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD
